/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package aggregator.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Activity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6457584744902574235L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Activity\",\"namespace\":\"aggregator.model\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"java-class\":\"java.lang.String\"}},{\"name\":\"pastWeekCount\",\"type\":\"long\"},{\"name\":\"pastWeekUniqueCount\",\"type\":\"long\"},{\"name\":\"pastMonthCount\",\"type\":\"long\"},{\"name\":\"pastMonthUniqueCount\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Activity> ENCODER =
      new BinaryMessageEncoder<Activity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Activity> DECODER =
      new BinaryMessageDecoder<Activity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Activity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Activity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Activity>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Activity to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Activity from a ByteBuffer. */
  public static Activity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String eventType;
  @Deprecated public long pastWeekCount;
  @Deprecated public long pastWeekUniqueCount;
  @Deprecated public long pastMonthCount;
  @Deprecated public long pastMonthUniqueCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Activity() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param pastWeekCount The new value for pastWeekCount
   * @param pastWeekUniqueCount The new value for pastWeekUniqueCount
   * @param pastMonthCount The new value for pastMonthCount
   * @param pastMonthUniqueCount The new value for pastMonthUniqueCount
   */
  public Activity(java.lang.String eventType, java.lang.Long pastWeekCount, java.lang.Long pastWeekUniqueCount, java.lang.Long pastMonthCount, java.lang.Long pastMonthUniqueCount) {
    this.eventType = eventType;
    this.pastWeekCount = pastWeekCount;
    this.pastWeekUniqueCount = pastWeekUniqueCount;
    this.pastMonthCount = pastMonthCount;
    this.pastMonthUniqueCount = pastMonthUniqueCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return pastWeekCount;
    case 2: return pastWeekUniqueCount;
    case 3: return pastMonthCount;
    case 4: return pastMonthUniqueCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = (java.lang.String)value$; break;
    case 1: pastWeekCount = (java.lang.Long)value$; break;
    case 2: pastWeekUniqueCount = (java.lang.Long)value$; break;
    case 3: pastMonthCount = (java.lang.Long)value$; break;
    case 4: pastMonthUniqueCount = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'pastWeekCount' field.
   * @return The value of the 'pastWeekCount' field.
   */
  public java.lang.Long getPastWeekCount() {
    return pastWeekCount;
  }

  /**
   * Sets the value of the 'pastWeekCount' field.
   * @param value the value to set.
   */
  public void setPastWeekCount(java.lang.Long value) {
    this.pastWeekCount = value;
  }

  /**
   * Gets the value of the 'pastWeekUniqueCount' field.
   * @return The value of the 'pastWeekUniqueCount' field.
   */
  public java.lang.Long getPastWeekUniqueCount() {
    return pastWeekUniqueCount;
  }

  /**
   * Sets the value of the 'pastWeekUniqueCount' field.
   * @param value the value to set.
   */
  public void setPastWeekUniqueCount(java.lang.Long value) {
    this.pastWeekUniqueCount = value;
  }

  /**
   * Gets the value of the 'pastMonthCount' field.
   * @return The value of the 'pastMonthCount' field.
   */
  public java.lang.Long getPastMonthCount() {
    return pastMonthCount;
  }

  /**
   * Sets the value of the 'pastMonthCount' field.
   * @param value the value to set.
   */
  public void setPastMonthCount(java.lang.Long value) {
    this.pastMonthCount = value;
  }

  /**
   * Gets the value of the 'pastMonthUniqueCount' field.
   * @return The value of the 'pastMonthUniqueCount' field.
   */
  public java.lang.Long getPastMonthUniqueCount() {
    return pastMonthUniqueCount;
  }

  /**
   * Sets the value of the 'pastMonthUniqueCount' field.
   * @param value the value to set.
   */
  public void setPastMonthUniqueCount(java.lang.Long value) {
    this.pastMonthUniqueCount = value;
  }

  /**
   * Creates a new Activity RecordBuilder.
   * @return A new Activity RecordBuilder
   */
  public static aggregator.model.Activity.Builder newBuilder() {
    return new aggregator.model.Activity.Builder();
  }

  /**
   * Creates a new Activity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Activity RecordBuilder
   */
  public static aggregator.model.Activity.Builder newBuilder(aggregator.model.Activity.Builder other) {
    return new aggregator.model.Activity.Builder(other);
  }

  /**
   * Creates a new Activity RecordBuilder by copying an existing Activity instance.
   * @param other The existing instance to copy.
   * @return A new Activity RecordBuilder
   */
  public static aggregator.model.Activity.Builder newBuilder(aggregator.model.Activity other) {
    return new aggregator.model.Activity.Builder(other);
  }

  /**
   * RecordBuilder for Activity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Activity>
    implements org.apache.avro.data.RecordBuilder<Activity> {

    private java.lang.String eventType;
    private long pastWeekCount;
    private long pastWeekUniqueCount;
    private long pastMonthCount;
    private long pastMonthUniqueCount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(aggregator.model.Activity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pastWeekCount)) {
        this.pastWeekCount = data().deepCopy(fields()[1].schema(), other.pastWeekCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pastWeekUniqueCount)) {
        this.pastWeekUniqueCount = data().deepCopy(fields()[2].schema(), other.pastWeekUniqueCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pastMonthCount)) {
        this.pastMonthCount = data().deepCopy(fields()[3].schema(), other.pastMonthCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pastMonthUniqueCount)) {
        this.pastMonthUniqueCount = data().deepCopy(fields()[4].schema(), other.pastMonthUniqueCount);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Activity instance
     * @param other The existing instance to copy.
     */
    private Builder(aggregator.model.Activity other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pastWeekCount)) {
        this.pastWeekCount = data().deepCopy(fields()[1].schema(), other.pastWeekCount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pastWeekUniqueCount)) {
        this.pastWeekUniqueCount = data().deepCopy(fields()[2].schema(), other.pastWeekUniqueCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pastMonthCount)) {
        this.pastMonthCount = data().deepCopy(fields()[3].schema(), other.pastMonthCount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pastMonthUniqueCount)) {
        this.pastMonthUniqueCount = data().deepCopy(fields()[4].schema(), other.pastMonthUniqueCount);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder setEventType(java.lang.String value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pastWeekCount' field.
      * @return The value.
      */
    public java.lang.Long getPastWeekCount() {
      return pastWeekCount;
    }

    /**
      * Sets the value of the 'pastWeekCount' field.
      * @param value The value of 'pastWeekCount'.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder setPastWeekCount(long value) {
      validate(fields()[1], value);
      this.pastWeekCount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pastWeekCount' field has been set.
      * @return True if the 'pastWeekCount' field has been set, false otherwise.
      */
    public boolean hasPastWeekCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pastWeekCount' field.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder clearPastWeekCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pastWeekUniqueCount' field.
      * @return The value.
      */
    public java.lang.Long getPastWeekUniqueCount() {
      return pastWeekUniqueCount;
    }

    /**
      * Sets the value of the 'pastWeekUniqueCount' field.
      * @param value The value of 'pastWeekUniqueCount'.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder setPastWeekUniqueCount(long value) {
      validate(fields()[2], value);
      this.pastWeekUniqueCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pastWeekUniqueCount' field has been set.
      * @return True if the 'pastWeekUniqueCount' field has been set, false otherwise.
      */
    public boolean hasPastWeekUniqueCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pastWeekUniqueCount' field.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder clearPastWeekUniqueCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pastMonthCount' field.
      * @return The value.
      */
    public java.lang.Long getPastMonthCount() {
      return pastMonthCount;
    }

    /**
      * Sets the value of the 'pastMonthCount' field.
      * @param value The value of 'pastMonthCount'.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder setPastMonthCount(long value) {
      validate(fields()[3], value);
      this.pastMonthCount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pastMonthCount' field has been set.
      * @return True if the 'pastMonthCount' field has been set, false otherwise.
      */
    public boolean hasPastMonthCount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pastMonthCount' field.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder clearPastMonthCount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pastMonthUniqueCount' field.
      * @return The value.
      */
    public java.lang.Long getPastMonthUniqueCount() {
      return pastMonthUniqueCount;
    }

    /**
      * Sets the value of the 'pastMonthUniqueCount' field.
      * @param value The value of 'pastMonthUniqueCount'.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder setPastMonthUniqueCount(long value) {
      validate(fields()[4], value);
      this.pastMonthUniqueCount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pastMonthUniqueCount' field has been set.
      * @return True if the 'pastMonthUniqueCount' field has been set, false otherwise.
      */
    public boolean hasPastMonthUniqueCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pastMonthUniqueCount' field.
      * @return This builder.
      */
    public aggregator.model.Activity.Builder clearPastMonthUniqueCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Activity build() {
      try {
        Activity record = new Activity();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (java.lang.String) defaultValue(fields()[0]);
        record.pastWeekCount = fieldSetFlags()[1] ? this.pastWeekCount : (java.lang.Long) defaultValue(fields()[1]);
        record.pastWeekUniqueCount = fieldSetFlags()[2] ? this.pastWeekUniqueCount : (java.lang.Long) defaultValue(fields()[2]);
        record.pastMonthCount = fieldSetFlags()[3] ? this.pastMonthCount : (java.lang.Long) defaultValue(fields()[3]);
        record.pastMonthUniqueCount = fieldSetFlags()[4] ? this.pastMonthUniqueCount : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Activity>
    WRITER$ = (org.apache.avro.io.DatumWriter<Activity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Activity>
    READER$ = (org.apache.avro.io.DatumReader<Activity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
