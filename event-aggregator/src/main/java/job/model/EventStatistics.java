/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package job.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EventStatistics extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 912995909048429835L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventStatistics\",\"namespace\":\"job.model\",\"fields\":[{\"name\":\"eventSubject\",\"type\":{\"type\":\"record\",\"name\":\"Subject\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"java-class\":\"java.lang.String\"}},{\"name\":\"id\",\"type\":\"int\"}]}},{\"name\":\"activities\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Activity\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"java-class\":\"java.lang.String\"}},{\"name\":\"pastWeekCount\",\"type\":\"long\"},{\"name\":\"pastWeekUniqueCount\",\"type\":\"long\"},{\"name\":\"pastMonthCount\",\"type\":\"long\"},{\"name\":\"pastMonthUniqueCount\",\"type\":\"long\"}]},\"java-class\":\"java.util.ArrayList\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventStatistics> ENCODER =
      new BinaryMessageEncoder<EventStatistics>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventStatistics> DECODER =
      new BinaryMessageDecoder<EventStatistics>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<EventStatistics> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<EventStatistics> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventStatistics>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this EventStatistics to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a EventStatistics from a ByteBuffer. */
  public static EventStatistics fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public job.model.Subject eventSubject;
  @Deprecated public java.util.List<job.model.Activity> activities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventStatistics() {}

  /**
   * All-args constructor.
   * @param eventSubject The new value for eventSubject
   * @param activities The new value for activities
   */
  public EventStatistics(job.model.Subject eventSubject, java.util.List<job.model.Activity> activities) {
    this.eventSubject = eventSubject;
    this.activities = activities;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventSubject;
    case 1: return activities;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventSubject = (job.model.Subject)value$; break;
    case 1: activities = (java.util.List<job.model.Activity>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventSubject' field.
   * @return The value of the 'eventSubject' field.
   */
  public job.model.Subject getEventSubject() {
    return eventSubject;
  }

  /**
   * Sets the value of the 'eventSubject' field.
   * @param value the value to set.
   */
  public void setEventSubject(job.model.Subject value) {
    this.eventSubject = value;
  }

  /**
   * Gets the value of the 'activities' field.
   * @return The value of the 'activities' field.
   */
  public java.util.List<job.model.Activity> getActivities() {
    return activities;
  }

  /**
   * Sets the value of the 'activities' field.
   * @param value the value to set.
   */
  public void setActivities(java.util.List<job.model.Activity> value) {
    this.activities = value;
  }

  /**
   * Creates a new EventStatistics RecordBuilder.
   * @return A new EventStatistics RecordBuilder
   */
  public static job.model.EventStatistics.Builder newBuilder() {
    return new job.model.EventStatistics.Builder();
  }

  /**
   * Creates a new EventStatistics RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventStatistics RecordBuilder
   */
  public static job.model.EventStatistics.Builder newBuilder(job.model.EventStatistics.Builder other) {
    return new job.model.EventStatistics.Builder(other);
  }

  /**
   * Creates a new EventStatistics RecordBuilder by copying an existing EventStatistics instance.
   * @param other The existing instance to copy.
   * @return A new EventStatistics RecordBuilder
   */
  public static job.model.EventStatistics.Builder newBuilder(job.model.EventStatistics other) {
    return new job.model.EventStatistics.Builder(other);
  }

  /**
   * RecordBuilder for EventStatistics instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventStatistics>
    implements org.apache.avro.data.RecordBuilder<EventStatistics> {

    private job.model.Subject eventSubject;
    private job.model.Subject.Builder eventSubjectBuilder;
    private java.util.List<job.model.Activity> activities;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(job.model.EventStatistics.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventSubject)) {
        this.eventSubject = data().deepCopy(fields()[0].schema(), other.eventSubject);
        fieldSetFlags()[0] = true;
      }
      if (other.hasEventSubjectBuilder()) {
        this.eventSubjectBuilder = job.model.Subject.newBuilder(other.getEventSubjectBuilder());
      }
      if (isValidValue(fields()[1], other.activities)) {
        this.activities = data().deepCopy(fields()[1].schema(), other.activities);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing EventStatistics instance
     * @param other The existing instance to copy.
     */
    private Builder(job.model.EventStatistics other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventSubject)) {
        this.eventSubject = data().deepCopy(fields()[0].schema(), other.eventSubject);
        fieldSetFlags()[0] = true;
      }
      this.eventSubjectBuilder = null;
      if (isValidValue(fields()[1], other.activities)) {
        this.activities = data().deepCopy(fields()[1].schema(), other.activities);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'eventSubject' field.
      * @return The value.
      */
    public job.model.Subject getEventSubject() {
      return eventSubject;
    }

    /**
      * Sets the value of the 'eventSubject' field.
      * @param value The value of 'eventSubject'.
      * @return This builder.
      */
    public job.model.EventStatistics.Builder setEventSubject(job.model.Subject value) {
      validate(fields()[0], value);
      this.eventSubjectBuilder = null;
      this.eventSubject = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventSubject' field has been set.
      * @return True if the 'eventSubject' field has been set, false otherwise.
      */
    public boolean hasEventSubject() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'eventSubject' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public job.model.Subject.Builder getEventSubjectBuilder() {
      if (eventSubjectBuilder == null) {
        if (hasEventSubject()) {
          setEventSubjectBuilder(job.model.Subject.newBuilder(eventSubject));
        } else {
          setEventSubjectBuilder(job.model.Subject.newBuilder());
        }
      }
      return eventSubjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'eventSubject' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public job.model.EventStatistics.Builder setEventSubjectBuilder(job.model.Subject.Builder value) {
      clearEventSubject();
      eventSubjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'eventSubject' field has an active Builder instance
     * @return True if the 'eventSubject' field has an active Builder instance
     */
    public boolean hasEventSubjectBuilder() {
      return eventSubjectBuilder != null;
    }

    /**
      * Clears the value of the 'eventSubject' field.
      * @return This builder.
      */
    public job.model.EventStatistics.Builder clearEventSubject() {
      eventSubject = null;
      eventSubjectBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'activities' field.
      * @return The value.
      */
    public java.util.List<job.model.Activity> getActivities() {
      return activities;
    }

    /**
      * Sets the value of the 'activities' field.
      * @param value The value of 'activities'.
      * @return This builder.
      */
    public job.model.EventStatistics.Builder setActivities(java.util.List<job.model.Activity> value) {
      validate(fields()[1], value);
      this.activities = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'activities' field has been set.
      * @return True if the 'activities' field has been set, false otherwise.
      */
    public boolean hasActivities() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'activities' field.
      * @return This builder.
      */
    public job.model.EventStatistics.Builder clearActivities() {
      activities = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventStatistics build() {
      try {
        EventStatistics record = new EventStatistics();
        if (eventSubjectBuilder != null) {
          record.eventSubject = this.eventSubjectBuilder.build();
        } else {
          record.eventSubject = fieldSetFlags()[0] ? this.eventSubject : (job.model.Subject) defaultValue(fields()[0]);
        }
        record.activities = fieldSetFlags()[1] ? this.activities : (java.util.List<job.model.Activity>) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventStatistics>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventStatistics>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventStatistics>
    READER$ = (org.apache.avro.io.DatumReader<EventStatistics>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
